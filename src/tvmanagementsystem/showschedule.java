/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tvmanagementsystem;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author gupta
 */

 class program{
    String name;
    String type;
    String starttime;
    String duration;
    program()
    {
        
    }
    program(String name,String type,String starttime,String duration)
    {
        this.name=name;
        this.type=type;
        this.starttime=starttime;
        this.duration=duration;
    }

   
}
class advertisement
{
    String name;
    String type;
    int priority;
    String duration;
    String showname;
    advertisement()
    {
        
    }
    advertisement(String name,String type,String duration,int priority,String showname)
    {
        this.name=name;
        this.type=type;
        this.duration=duration;
        this.priority=priority;
        this.showname=showname;
    }
}
public class showschedule extends javax.swing.JFrame {

   
    String time;
    String name;
    String type;
    String duration;
   static  ArrayList<showschedule> weekend= new ArrayList<>();
   static String m="";
    
    showschedule(String time,String name,String type,String duration)
    {
        this.time=time;
        this.type=type;
        this.duration=duration;
        this.name=name;
        
    }
    public showschedule() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        weekends = new javax.swing.JButton();
        Weekdays = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        schedule = new javax.swing.JTable();
        loginpage = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setText("Schedule");

        weekends.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        weekends.setText("Weekends");
        weekends.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weekendsActionPerformed(evt);
            }
        });

        Weekdays.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Weekdays.setText("Weekdays");
        Weekdays.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WeekdaysActionPerformed(evt);
            }
        });

        schedule.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Time", "Name", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(schedule);
        if (schedule.getColumnModel().getColumnCount() > 0) {
            schedule.getColumnModel().getColumn(0).setResizable(false);
            schedule.getColumnModel().getColumn(1).setResizable(false);
            schedule.getColumnModel().getColumn(2).setResizable(false);
        }

        loginpage.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        loginpage.setText("Login");
        loginpage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginpageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 726, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(Weekdays)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(weekends))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(loginpage, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Weekdays, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weekends, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loginpage, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(495, 495, 495))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public static String getmovietime(String time,int duration)
    {
        String str[]=time.split(":");
        int hour=Integer.parseInt(str[0]);
        int min=Integer.parseInt(str[1]);
        
        min+=duration;
        if(min>=60)
        {
            hour+=1;
            int tmp=min-60;
            if(tmp<10)
            return (Integer.toString(hour)+":0"+Integer.toString(tmp));
            else
             return (Integer.toString(hour)+":"+Integer.toString(tmp));   
        }
        if(min<10)
            return (Integer.toString(hour)+":0"+Integer.toString(min));
        return (Integer.toString(hour)+":"+Integer.toString(min));
    }
    public static  String gettime(String time,int duration)
    {
        String str[]=time.split(":");
        int hour=Integer.parseInt(str[0]);
        int min=Integer.parseInt(str[1]);
        
        min+=duration;
        if(min==60)
        {
            hour+=1;
            return (Integer.toString(hour)+":00");
        }
        return (Integer.toString(hour)+":"+Integer.toString(min));
    }
    
    public static  String movie(String t,String name,String type)
    {
         ArrayList<showschedule> arshow = returnad(1);
        ArrayList<showschedule> archannel = returnad(0);
        m = name;
        ArrayList<showschedule> sponsor = returnad(3);
        ArrayList<showschedule> all = returnad(4);
         String a = "Select * from advertisements where type='channel'";
         String b = "select * from advertisements where type='show'";
         String c = "select * from advertisements where type='sponsor'";
         String d= "select * from advertisements where showname='m'";
        String e = "select * from advertisements";
        String time="";
        //ArrayList<showschedule> all = returnad(3);
        int duration=0;
        int channel = 0;
        while(duration<=210)
        {
             if(duration==198)
    		      {
    			     
                              time = t;
        		      t=getmovietime(t,12);
                              weekend.add(new showschedule(time+"-"+t,name,type,"210"));
        		     // System.out.println(moviename+" "+ "movie" + " " + curr + "-"+ t);
        		      break;
    		      }
                  time=t;
    		  t=getmovietime(t,15);
    		   duration=duration+15;
                    weekend.add(new showschedule(time+"-"+t,name,type,"210"));
                   if(channel<2 && archannel.size()>0)
                   {
                        for(int i=0;i<archannel.size();i++)
    		          {
    			         
    			        	  time=t;
    			        	  t=getmovietime(t,3);
    			        	  duration=duration+3;
    			        	  //System.out.println(arr1.get(i).name+" "+ "channel sponsor" + " " + c + "-"+ t);
                                          weekend.add(new showschedule(time+"-"+t,archannel.get(i).name,archannel.get(i).type+"          (ad)",archannel.get(i).duration));
    			        	  break;
    			          
    		          }
    		        channel++;
                   }
                   else if(sponsor.size()>=1)
                   {
                        for(int i=0;i<archannel.size();i++)
    		          {
    			         
    			        	  time=t;
    			        	  t=getmovietime(t,3);
    			        	  duration=duration+3;
    			        	  //System.out.println(arr1.get(i).name+" "+ "channel sponsor" + " " + c + "-"+ t);
                                          weekend.add(new showschedule(time+"-"+t,sponsor.get(i).name,sponsor.get(i).type+"          (ad)",sponsor.get(i).duration));
    			        	  break;
    			          
    		          }
                        sponsor.remove(0);
                                
                   }
                   else
                   {
                       for(int i=0;i<all.size();i++)
    		          {
    			         
    			        	  time=t;
    			        	  t=getmovietime(t,3);
    			        	  duration=duration+3;
    			        	  //System.out.println(arr1.get(i).name+" "+ "channel sponsor" + " " + c + "-"+ t);
                                          weekend.add(new showschedule(time+"-"+t,all.get(i).name,all.get(i).type+"          (ad)",all.get(i).duration));
                                          showschedule s = all.get(0);
                                          all.remove(0);
                                          all.add(s);
    			        	  break;
    			          
    		          }
                   }
                    
             
             
        }
        
        return t;
    }
    public String show1(String t,String showname,String showtype)
    {
        int duration=0;
       
        ArrayList<showschedule> arshow = returnad(1);
        ArrayList<showschedule> archannel = returnad(0);
        int show=0;
         while(duration<=60)
            {
               
              
                if(duration>=54)
                {
                    System.out.println("now duration is 54"+t);
                     String time = t;
                     t = gettime(t,6);
                     weekend.add(new showschedule(time+"-"+t,showname,showtype,"60"));
                     break;
                }
                String time = t;
                t = gettime(t,15);
              weekend.add(new showschedule(time+"-"+t,showname,showtype,"60"));
               // arr1.add(new showschedule(time+"-"+t,name,type,duration1));
               
             System.out.println(t);
                int flag = -1;
                time = t;
                t = gettime(t,3);
                for(int i=0;i<arshow.size();i++)
                {
                    if(show >=1)
                        break;
                    if(arshow.get(i).name.equalsIgnoreCase(showname))
                    {
                        weekend.add(new showschedule(time+"-"+t,arshow.get(i).name,arshow.get(i).type,arshow.get(i).duration));
                        flag = 1;
                        show++;
                        
                    } 
                }
                if(flag ==-1)
                {
                    for(int i=0;i<archannel.size();i++)
                    {
                        if(archannel.get(i).type.equalsIgnoreCase("channel"))
                        {
                                weekend.add(new showschedule(time+"-"+t,archannel.get(0).name,archannel.get(0).type,archannel.get(0).duration));
                                showschedule sh = arshow.get(0);
                                archannel.remove(0);
                                archannel.add(sh);
                                break;

                        }
                    }
                     
                }
                duration+=18;
                
                
            }
          return t;  
    }
    private void weekendsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weekendsActionPerformed
    
        ((DefaultTableModel)schedule.getModel()).setNumRows(0);
        weekend.clear();
         try {
            ResultSet rs = null;
            Statement stmt = db();
           
                        // checking whether show advertisement valid or not
            String a = "select showname from advertisements where type='show'";
            rs = stmt.executeQuery(a);
            ArrayList<String> showad = new ArrayList<String>();
            while(rs.next())
            {
               showad.add(rs.getString("showname"));
            }
            for(int i=0;i<showad.size();i++)
            {
                String show = showad.get(i);
                rs =stmt.executeQuery("select * from programs where name='"+show+"'");
                if(rs.next()==false)
                {
                    JOptionPane.showMessageDialog(null,show+ "this advertisement is invalid");
                    return;
                }
            } //checking end
            //checking for expire advertisement
            rs = stmt.executeQuery("select * from advertisements where expire<2019 && type='channel'");
            while(rs.next())
            {
                System.out.println(rs.getString("name"));
                JOptionPane.showMessageDialog(null,"expire advertisement: "+ rs.getString("name"));
            }
            // end for expire advertisement
         }
         catch(Exception e )
         {
             
         }
         // add weekend programs
        
          try
          {
              Statement st = db();
              String t= "1:00";
              while(!t.equals("7:00") && !t.equals("6:30")  )
              {
                  if(t.equals("5:30") || t.equals("4:30")  )
                      t=gettime(t,30);
                  System.out.println(t+"time");
                 String query = "select * from weekend where starttime='"+t+"'";
                 ResultSet r = st.executeQuery(query);
                 ArrayList<program> pr = new ArrayList<program>();
                 while(r.next())
                 {
                     pr.add(new program(r.getString("name"),r.getString("category"),r.getString("starttime"),r.getString("duration")));
                 }
                 if(pr.size()==0)
                 {
                     String time=t;
                     t=gettime(t,60);
                     weekend.add(new showschedule(time+"-"+t,"none","none","60"));
                     continue;
                 }
                 if(pr.size()==1) // if only one program is available
                 {
                     if(pr.get(0).type.equals("movie"))
                     {
                         t = movie(t,pr.get(0).name,pr.get(0).type);
                     }
                     else
                     {
                         t = show1(t,pr.get(0).name,pr.get(0).type);
                     }
                 }
                 else if(pr.size()>1) // more than one program available
                 {
                     System.out.println(t + "  has more than one program "+ pr.size());
                     int flag  = 0;
                     for(int i=0;i<pr.size();i++)
                     {
                         System.out.println(pr.get(i).name);
                         if(pr.get(i).type.equalsIgnoreCase("music"))
                         {
                             System.out.println(t+ "kapil");
                              t = show1(t,pr.get(i).name,pr.get(i).type);
                              flag = 1;
                              break;
                         }
                         else if(pr.get(i).type.equalsIgnoreCase("movie"))
                         {
                            
                              System.out.println("tims is "+ t + " show is " + pr.get(i).type + "but it is movie");
                              t = movie(t,pr.get(i).name,pr.get(i).type);
                              flag = 1;
                              break;  
                         }  
                     }
                     if(flag == 0)
                     {
                         t = show1(t,pr.get(0).name,pr.get(0).type);
                     }
                         
                 }
                 
                  
              }
              
          }
          catch(Exception e)
          {
              
          }
         
        DefaultTableModel model=(DefaultTableModel) schedule.getModel();
         Object row[]=new Object[4];
         System.out.println(weekend.size()+"dkf");
         for(int i=0;i<weekend.size();i++)
         {
            // System.out.println(arr1.get(i).time+"   "+arr1.get(i).name+ " dkfjdfj ");
             row[0]=weekend.get(i).time;
             row[1]=weekend.get(i).name;
             row[2]=weekend.get(i).type;
             row[3]=weekend.get(i).duration+"min";
      
             model.addRow(row);
         }
         schedule.show();  
        

              
              
            
            
            
                 
         
    }//GEN-LAST:event_weekendsActionPerformed
 public static Statement db()
 {
     Statement stmt=null;
     try
     {
         Class.forName("com.mysql.cj.jdbc.Driver");
            String dbURL = "jdbc:mysql://localhost:3306/tv";
            Connection dbCon = null;
             dbCon = DriverManager.getConnection(dbURL, "root","kapil" );
             stmt = dbCon.createStatement();
     }
     catch(Exception e)
     {
         
     }
     return stmt;
 }
 public static ArrayList returnad(int abc)
 {
     ArrayList<showschedule> arr = new ArrayList<>();
     try
     {
         Statement st = db();
         String a = "Select * from advertisements where type='channel'";
         String b = "select * from advertisements where type='show'";
         String c = "select * from advertisements where type='sponsor'";
         String d= "select * from advertisements where showname='m'";
        String e = "select * from advertisements";
             
         ResultSet r=null;
          if(abc==0)
         r = st.executeQuery(a);
         else if(abc==1)
         r = st.executeQuery(b);  
         else if(abc==2)
              r = st.executeQuery(c);
          else if(abc==3)
              r=st.executeQuery(d);
          else 
              r =st.executeQuery(e);
         while(r.next())
         {
             arr.add(new showschedule("0",r.getString("name"),r.getString("type"),r.getString("duration")));
         }
         
     }
     catch(Exception e)
     {
         
     }
     return arr;
 }
 
    private void WeekdaysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WeekdaysActionPerformed
       ((DefaultTableModel)schedule.getModel()).setNumRows(0);
         ArrayList<showschedule> arr1 = new ArrayList<showschedule>();        
       
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String dbURL = "jdbc:mysql://localhost:3306/tv";
            Connection dbCon = null;
            ResultSet rs = null;
            ResultSet rs1=null;
            ResultSet rs3=null;
             dbCon = DriverManager.getConnection(dbURL, "root","kapil" );
            Statement stmt = dbCon.createStatement();
            Statement stmt1=dbCon.createStatement();
            Statement stmt3=dbCon.createStatement();
            // checking whether show advertisement valid or not
            String a = "select showname from advertisements where type='show'";
            rs = stmt.executeQuery(a);
            ArrayList<String> showad = new ArrayList<String>();
            while(rs.next())
            {
               showad.add(rs.getString("showname"));
            }
            for(int i=0;i<showad.size();i++)
            {
                String show = showad.get(i);
                rs =stmt.executeQuery("select * from programs where name='"+show+"'");
                if(rs.next()==false)
                {
                    JOptionPane.showMessageDialog(null,show+ "this advertisement is invalid");
                    return;
                }
            } //checking end
            //checking for expire advertisement
            rs = stmt.executeQuery("select * from advertisements where expire<2019 && type='channel'");
            while(rs.next())
            {
               
                JOptionPane.showMessageDialog(null,"expire advertisement: "+ rs.getString("name"));
            }
            //ending of expire advertisement
           // ArrayList<program> arr=new ArrayList<program>();
        }
        catch(Exception e)
        {
        }
        System.out.println("kapil");
        String t = "1:00";
        while(!t.equals("7:00"))
        {
            
            try
            {
                Statement st = db();
                ResultSet r = null;
                ArrayList<showschedule> arshow = returnad(1);
                ArrayList<showschedule> archannel = returnad(0);
            String query = "select * from programs where starttime='"+t+"'"; 
            r = st.executeQuery(query);
            String name="";
            String type="";
            String duration1="";
            if(r.next())
            {
                System.out.println(r.getString("name"));
                name=r.getString("name");
                type=r.getString("category");
                duration1=r.getString("duration");
            }
            r = st.executeQuery(query);
            r.next();
            int duration = 0;
            int show = 0;
              
            while(duration<=60)
            {
               
              
                if(duration>=54)
                {
                    
                     String time = t;
                     t = gettime(t,6);
                     arr1.add(new showschedule(time+"-"+t,r.getString("name"),r.getString("category"),r.getString("duration")));
                     
                     break;
                }
                String time = t;
                t = gettime(t,15);
              
                arr1.add(new showschedule(time+"-"+t,name,type,duration1));
             System.out.println(t);
                int flag = -1;
                time = t;
                t = gettime(t,3);
                for(int i=0;i<arshow.size();i++)
                {
                    if(show >=1)
                        break;
                    if(arshow.get(i).name.equalsIgnoreCase(r.getString("name")))
                    {
                        arr1.add(new showschedule(time+"-"+t,arshow.get(i).name,arshow.get(i).type+" (add)",arshow.get(i).duration));
                        flag = 1;
                        show++;
                        
                    } 
                }
                if(flag ==-1)
                {
                    for(int i=0;i<archannel.size();i++)
                    {
                        if(archannel.get(i).type.equalsIgnoreCase("channel"))
                        {
                                arr1.add(new showschedule(time+"-"+t,archannel.get(0).name,archannel.get(0).type+" (add)",archannel.get(0).duration));
                                showschedule sh = arshow.get(0);
                                archannel.remove(0);
                                archannel.add(sh);
                                break;

                        }
                    }
                     
                }
                duration+=18;
                
                
            }
            
            }
           
           catch(Exception e)
           {
               
           }
            
        }
      
      
          
     
          
            
         
           DefaultTableModel model=(DefaultTableModel) schedule.getModel();
         Object row[]=new Object[4];
         System.out.println(arr1.size()+"dkf");
         for(int i=0;i<arr1.size();i++)
         {
            // System.out.println(arr1.get(i).time+"   "+arr1.get(i).name+ " dkfjdfj ");
             row[0]=arr1.get(i).time;
             row[1]=arr1.get(i).name;
             row[2]=arr1.get(i).type;
             row[3]=arr1.get(i).duration+"min";
      
             model.addRow(row);
         }
         schedule.show();  
        
       
              
    }//GEN-LAST:event_WeekdaysActionPerformed

    private void loginpageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginpageActionPerformed
        this.setVisible(false);
        (new login()).setVisible(true);
    }//GEN-LAST:event_loginpageActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(showschedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(showschedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(showschedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(showschedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new showschedule().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Weekdays;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loginpage;
    private javax.swing.JTable schedule;
    private javax.swing.JButton weekends;
    // End of variables declaration//GEN-END:variables
}
